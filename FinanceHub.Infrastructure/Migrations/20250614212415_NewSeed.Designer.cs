// <auto-generated />
using System;
using FinanceHub.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinanceHub.Infrastructure.Migrations
{
    [DbContext(typeof(FinHubDbContext))]
    [Migration("20250614212415_NewSeed")]
    partial class NewSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinanceHub.Core.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c8d67f5-91f7-4e5f-8ace-e4e0313b002c"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("5c528ff1-5647-457d-ada2-592983e41677"),
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("10b10de2-fcf7-4c25-a5ba-4c6bd6e3f261"),
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.ChatParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatParticipants");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8a0e462-a9b1-4aea-89bd-ac8d0f239133"),
                            AuthorId = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d"),
                            Content = "Дуже корисна стаття, дякую! Особливо для новачків.",
                            CreatedAt = new DateTime(2025, 6, 5, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7335),
                            IsModified = false,
                            PostId = new Guid("0d2999a8-7501-40eb-ae47-3c832a845a61")
                        },
                        new
                        {
                            Id = new Guid("4c323a31-056a-4a77-88f9-8e1bc49164f3"),
                            AuthorId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc"),
                            Content = "Рада, що було корисно!",
                            CreatedAt = new DateTime(2025, 6, 5, 23, 24, 14, 914, DateTimeKind.Utc).AddTicks(7343),
                            IsModified = false,
                            ParentId = new Guid("e8a0e462-a9b1-4aea-89bd-ac8d0f239133"),
                            PostId = new Guid("36ccf556-af1a-4ab0-abee-b002d5149395")
                        },
                        new
                        {
                            Id = new Guid("1190517d-9e50-4296-ad1c-7c81c31fdfc6"),
                            AuthorId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497"),
                            Content = "Дякую за детальний аналіз!",
                            CreatedAt = new DateTime(2025, 6, 14, 15, 24, 14, 914, DateTimeKind.Utc).AddTicks(7345),
                            IsModified = false,
                            PostId = new Guid("8b89992d-d917-4d3a-b29c-b461c183e57b")
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Following", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FollowingHubId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FollowingUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("FollowingHubId");

                    b.HasIndex("FollowingUserId");

                    b.ToTable("Followings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a31f6e3-996f-4d9e-987a-4a265de720d9"),
                            CreatedAt = new DateTime(2025, 6, 14, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7009),
                            FollowerId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc"),
                            FollowingUserId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497")
                        },
                        new
                        {
                            Id = new Guid("90a1f1df-cf89-486d-9611-16551909aeb4"),
                            CreatedAt = new DateTime(2025, 6, 14, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7013),
                            FollowerId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497"),
                            FollowingUserId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc")
                        },
                        new
                        {
                            Id = new Guid("ac802bf2-d39c-4fec-a9fc-5f8440ca5c8a"),
                            CreatedAt = new DateTime(2025, 6, 14, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7014),
                            FollowerId = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d"),
                            FollowingUserId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc")
                        },
                        new
                        {
                            Id = new Guid("7dfa792d-a0d0-44c8-a2a6-6c4e266700a7"),
                            CreatedAt = new DateTime(2025, 6, 14, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7016),
                            FollowerId = new Guid("fb58c252-c3a6-47cb-ad91-2efd64910a14"),
                            FollowingHubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac")
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Hub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackgroundPhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainPhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostPermission")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hubs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            Description = "Спільнота для тих, хто робить перші кроки у світі інвестицій.",
                            Name = "Інвестиції для початківців",
                            PostPermission = "public"
                        },
                        new
                        {
                            Id = new Guid("1d5320e6-358f-411b-8d67-d5534b8a7d12"),
                            Description = "Cпільнота для активних трейдерів.",
                            Name = "Криптотрейдинг 24/7",
                            PostPermission = "public"
                        },
                        new
                        {
                            Id = new Guid("bbde15f8-f63c-4b86-a0e7-0f91d7344c78"),
                            Description = "Поради та лайфхаки про те, як ефективно управляти грошима і досягати фінансових цілей.",
                            Name = "Особистий бюджет та заощадження",
                            PostPermission = "public"
                        },
                        new
                        {
                            Id = new Guid("77983140-1aae-49f0-9d71-bdbc6560e838"),
                            Description = "Глибокий аналіз компаній, секторів та ринкових трендів. Ділимося звітами та прогнозами.",
                            Name = "Аналіз фондового ринку",
                            PostPermission = "moderated"
                        },
                        new
                        {
                            Id = new Guid("7810c753-2758-492d-a723-e4ba53344133"),
                            Description = "Все про купівлю, продаж та оренду нерухомості в Україні та за кордоном.",
                            Name = "Інвестиції в нерухомість",
                            PostPermission = "public"
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.HubJoinRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("HubId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("UserId");

                    b.ToTable("HubJoinRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("743f3e37-c7ac-4852-8e8a-337d7c15517c"),
                            Content = "Привіт, маю досвід у трейдингу, хочу приєднатися до спільноти.",
                            HubId = new Guid("1d5320e6-358f-411b-8d67-d5534b8a7d12"),
                            RequestedAt = new DateTime(2025, 6, 13, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7417),
                            Status = "Pending",
                            UserId = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d")
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.HubMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("HubId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("HubId", "UserId")
                        .IsUnique();

                    b.ToTable("HubMembers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b09a13bf-9b38-4d5e-a44a-16bbc742ca88"),
                            HubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 5, 5, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6818),
                            Role = "Admin",
                            UserId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc")
                        },
                        new
                        {
                            Id = new Guid("9f8b95ec-28c3-47c0-9692-1b10fc3f8b38"),
                            HubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 6, 4, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6822),
                            Role = "Member",
                            UserId = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d")
                        },
                        new
                        {
                            Id = new Guid("cf79a435-6e90-4baa-9c29-d4ec1f40cb3e"),
                            HubId = new Guid("1d5320e6-358f-411b-8d67-d5534b8a7d12"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 5, 25, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6824),
                            Role = "Admin",
                            UserId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497")
                        },
                        new
                        {
                            Id = new Guid("baa49208-3418-4e72-9e24-a4b366cc659c"),
                            HubId = new Guid("1d5320e6-358f-411b-8d67-d5534b8a7d12"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 5, 27, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6825),
                            Role = "Member",
                            UserId = new Guid("fb58c252-c3a6-47cb-ad91-2efd64910a14")
                        },
                        new
                        {
                            Id = new Guid("1c3f2667-7381-4ec5-a728-fd582cb0dd71"),
                            HubId = new Guid("bbde15f8-f63c-4b86-a0e7-0f91d7344c78"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 5, 15, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6827),
                            Role = "Admin",
                            UserId = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d")
                        },
                        new
                        {
                            Id = new Guid("e638f1b1-1004-4ddb-a03c-dfd758a98c18"),
                            HubId = new Guid("bbde15f8-f63c-4b86-a0e7-0f91d7344c78"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 5, 20, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6830),
                            Role = "Member",
                            UserId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc")
                        },
                        new
                        {
                            Id = new Guid("a1bb5002-b42f-44ae-aa29-9361c1166d66"),
                            HubId = new Guid("77983140-1aae-49f0-9d71-bdbc6560e838"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 5, 23, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6832),
                            Role = "Admin",
                            UserId = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d")
                        },
                        new
                        {
                            Id = new Guid("4f9615f1-da15-4cc9-8ce9-0ed7d51b58db"),
                            HubId = new Guid("77983140-1aae-49f0-9d71-bdbc6560e838"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 5, 30, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6834),
                            Role = "Member",
                            UserId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497")
                        },
                        new
                        {
                            Id = new Guid("8bbfbc1f-b835-4d98-adc8-bc597bfc4c68"),
                            HubId = new Guid("77983140-1aae-49f0-9d71-bdbc6560e838"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 5, 31, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6838),
                            Role = "Member",
                            UserId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc")
                        },
                        new
                        {
                            Id = new Guid("63f9a7e7-c52f-4840-b44c-7781fc7009c9"),
                            HubId = new Guid("7810c753-2758-492d-a723-e4ba53344133"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 5, 26, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6840),
                            Role = "Admin",
                            UserId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497")
                        },
                        new
                        {
                            Id = new Guid("05e62932-ccd7-4d46-a123-ebf0230f5924"),
                            HubId = new Guid("7810c753-2758-492d-a723-e4ba53344133"),
                            IsApproved = true,
                            JoinedAt = new DateTime(2025, 5, 28, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(6842),
                            Role = "Member",
                            UserId = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d")
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0efde790-517f-4ee9-9eec-fef3b2b04ef1"),
                            PostId = new Guid("0d2999a8-7501-40eb-ae47-3c832a845a61"),
                            UserId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497")
                        },
                        new
                        {
                            Id = new Guid("f2f10449-ee30-4355-87a5-c278bd38aa75"),
                            PostId = new Guid("8b89992d-d917-4d3a-b29c-b461c183e57b"),
                            UserId = new Guid("fb58c252-c3a6-47cb-ad91-2efd64910a14")
                        },
                        new
                        {
                            Id = new Guid("8533cea6-edd6-4cc4-9ce2-028a77c83e3a"),
                            PostId = new Guid("36ccf556-af1a-4ab0-abee-b002d5149395"),
                            UserId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc")
                        },
                        new
                        {
                            Id = new Guid("3c3d075e-8f9b-414b-8961-98238c6d27f0"),
                            PostId = new Guid("b937fb2c-16f3-4b23-ad9d-800a2bad9361"),
                            UserId = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d")
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecipientUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("SenderUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HubId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TriggeredBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("TriggeredBy");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1342ce7-ecac-4421-a74f-d09bdef5d91b"),
                            Content = "трейдер_макс вподобав ваш пост.",
                            CreatedAt = new DateTime(2025, 6, 13, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7452),
                            IsRead = false,
                            PostId = new Guid("0d2999a8-7501-40eb-ae47-3c832a845a61"),
                            TriggeredBy = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497"),
                            Type = "like",
                            UserId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc")
                        },
                        new
                        {
                            Id = new Guid("b0cd692d-2474-44d3-bba9-2f8bfdbe7cb7"),
                            Content = "олена_інвест почала стежити за вами.",
                            CreatedAt = new DateTime(2025, 5, 25, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7456),
                            IsRead = true,
                            TriggeredBy = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc"),
                            Type = "follow",
                            UserId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497")
                        },
                        new
                        {
                            Id = new Guid("8ef60ca9-ee1f-4ea9-8a33-ce4cd4a1a92b"),
                            Content = "аналітик_андрій хоче приєднатися до вашого хабу 'Криптотрейдинг 24/7'.",
                            CreatedAt = new DateTime(2025, 6, 13, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7459),
                            HubId = new Guid("1d5320e6-358f-411b-8d67-d5534b8a7d12"),
                            IsRead = false,
                            RequestId = new Guid("743f3e37-c7ac-4852-8e8a-337d7c15517c"),
                            TriggeredBy = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d"),
                            Type = "joinRequest",
                            UserId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497")
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HubId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("HubId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d2999a8-7501-40eb-ae47-3c832a845a61"),
                            AuthorId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc"),
                            Content = "Друзі, як диверсифікуєте свій портфель? Скільки відсотків тримаєте в акціях, а скільки в облігаціях?",
                            CreatedAt = new DateTime(2025, 6, 2, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7123),
                            HubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0966922d-4a6b-4d52-9cc2-7f9e78858d92"),
                            AuthorId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc"),
                            Content = "Для початківців ETF – чудовий старт. Купуючи один інструмент, ви одразу інвестуєте в сотні компаній. Наприклад, в індекс S&P 500.",
                            CreatedAt = new DateTime(2025, 6, 4, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7126),
                            HubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8b89992d-d917-4d3a-b29c-b461c183e57b"),
                            AuthorId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc"),
                            Content = "Сьогодні вперше отримала дивіденди. Невелика сума, але як же приємно розуміти, що твої гроші працюють!",
                            CreatedAt = new DateTime(2025, 6, 6, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7130),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("36ccf556-af1a-4ab0-abee-b002d5149395"),
                            AuthorId = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc"),
                            Content = "Хто що думає про акції Microsoft на довгострок? Здається, їхній фокус на AI дасть хороші плоди.",
                            CreatedAt = new DateTime(2025, 6, 9, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7131),
                            HubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b937fb2c-16f3-4b23-ad9d-800a2bad9361"),
                            AuthorId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497"),
                            Content = "Ринок сьогодні дуже волатильний. Фіксую частину прибутку, краще синиця в руках.",
                            CreatedAt = new DateTime(2025, 6, 7, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7133),
                            HubId = new Guid("1d5320e6-358f-411b-8d67-d5534b8a7d12"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3dd6a9b8-3d89-4b80-af1f-85684ea13a9a"),
                            AuthorId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497"),
                            Content = "Найважче в трейдингу – це дисципліна. Вміння чекати на свій сетап і не піддаватися FOMO – ключ до успіху.",
                            CreatedAt = new DateTime(2025, 6, 8, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7135),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8c80990c-b46f-46d8-94af-b55efa872713"),
                            AuthorId = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497"),
                            Content = "На графіку EUR/USD формується 'голова і плечі'. Схоже, насувається корекція. Будьте обережні.",
                            CreatedAt = new DateTime(2025, 6, 11, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7137),
                            HubId = new Guid("1d5320e6-358f-411b-8d67-d5534b8a7d12"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bb3e9caf-72ca-49a5-8799-b45b46d2ca55"),
                            AuthorId = new Guid("fb58c252-c3a6-47cb-ad91-2efd64910a14"),
                            Content = "Що думаєте про перспективи Solana (SOL)? Технологія вражає, але чи зможе вона конкурувати з Ethereum?",
                            CreatedAt = new DateTime(2025, 6, 5, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7139),
                            HubId = new Guid("1d5320e6-358f-411b-8d67-d5534b8a7d12"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2945ed78-e5e1-4ed4-b8d6-c6c9d45f784d"),
                            AuthorId = new Guid("fb58c252-c3a6-47cb-ad91-2efd64910a14"),
                            Content = "HODL – це не просто мем, це стратегія. В довгостроковій перспективі віра в технологію винагороджується.",
                            CreatedAt = new DateTime(2025, 6, 7, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7143),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4d1222e9-6f36-4434-bf19-8ac25ef086a6"),
                            AuthorId = new Guid("fb58c252-c3a6-47cb-ad91-2efd64910a14"),
                            Content = "Не забувайте переводити крипту з бірж на холодні гаманці. 'Not your keys, not your coins!' – золоте правило.",
                            CreatedAt = new DateTime(2025, 6, 10, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7145),
                            HubId = new Guid("1d5320e6-358f-411b-8d67-d5534b8a7d12"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fd24df51-46c3-42ae-b766-8b5cc381aa96"),
                            AuthorId = new Guid("fb58c252-c3a6-47cb-ad91-2efd64910a14"),
                            Content = "Ринок NFT зараз переживає не найкращі часи, але це гарна можливість придивитися до фундаментально сильних проєктів.",
                            CreatedAt = new DateTime(2025, 6, 12, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7163),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b639f0ae-19b8-44e8-ac01-c49f16e59ab1"),
                            AuthorId = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d"),
                            Content = "Спробувала правило 50/30/20 для бюджетування (50% – потреби, 30% – бажання, 20% – заощадження). Дуже дисциплінує!",
                            CreatedAt = new DateTime(2025, 6, 3, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7165),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e46c1463-c330-4ea0-bcce-954f9cf49284"),
                            AuthorId = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d"),
                            Content = "Де ви зберігаєте свою фінансову подушку? Депозит, ОВДП чи просто на картці? Шукаю найнадійніший варіант.",
                            CreatedAt = new DateTime(2025, 6, 5, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7170),
                            HubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9b12b235-d873-4234-94a3-e4acc8e60074"),
                            AuthorId = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d"),
                            Content = "Найкраща інвестиція – це інвестиція в себе. Курси, книги, здоров'я – це те, що завжди окупиться.",
                            CreatedAt = new DateTime(2025, 6, 8, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7172),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eb6e6ffa-d646-459a-b8b6-786ba44b0db2"),
                            AuthorId = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d"),
                            Content = "Щоб не робити імпульсивних покупок, завжди чекаю 24 години перед тим, як щось купити онлайн. Часто бажання зникає.",
                            CreatedAt = new DateTime(2025, 6, 11, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7173),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3aa55377-f7c5-4df8-8c0b-ceb902fe2b84"),
                            AuthorId = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d"),
                            Content = "Сектор напівпровідників виглядає перегрітим. P/E коефіцієнти деяких компаній, як-от Nvidia, просто захмарні.",
                            CreatedAt = new DateTime(2025, 6, 6, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7176),
                            HubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00c21421-57fb-4d5c-9c0b-8d7a874145c9"),
                            AuthorId = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d"),
                            Content = "Інфляція в єврозоні сповільнюється, але повільніше, ніж очікувалося. Це може змусити ЄЦБ тримати ставки високими довше.",
                            CreatedAt = new DateTime(2025, 6, 9, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7178),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("94c52d3d-2b77-4070-8a26-cfeacd7ba2f5"),
                            AuthorId = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d"),
                            Content = "Згідно зі звітом Goldman Sachs, ринки, що розвиваються, можуть показати кращу динаміку в наступному році. Погоджуєтесь?",
                            CreatedAt = new DateTime(2025, 6, 10, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7179),
                            HubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f7c8cadb-6f04-4eb0-8e2b-b954eaacefe6"),
                            AuthorId = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d"),
                            Content = "Ніколи не інвестуйте в бізнес, який ви не розумієте. Це просте правило Воррена Баффета врятувало мені багато грошей.",
                            CreatedAt = new DateTime(2025, 6, 12, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7181),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cebd0027-084d-4b05-9187-435938c25ae7"),
                            AuthorId = new Guid("c0fceb80-1eed-4cb2-83d1-76518570cf7a"),
                            Content = "Вітаємо на FinanceHub! Ми оновили правила спільноти. Будь ласка, ознайомтеся.",
                            CreatedAt = new DateTime(2025, 5, 30, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7228),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a8ff694e-868f-4f1a-914c-c4e633f615b5"),
                            AuthorId = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d"),
                            Content = "Microsoft ($MSFT) продовжує вражати. Їхній сегмент 'Intelligent Cloud' з Azure зростає шаленими темпами. Це вже не просто 'Windows і Office', а справжній хмарний гігант.",
                            CreatedAt = new DateTime(2025, 6, 10, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7230),
                            HubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3834e9eb-de7a-4bfc-bf42-5d9409488fa4"),
                            AuthorId = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d"),
                            Content = "Alphabet ($GOOGL) — це машина для друку грошей. Монополія в пошуку та доходи від YouTube/Android дають їм змогу фінансувати будь-які 'інші ставки'. Поки їхній рекламний бізнес сильний, акції залишатимуться фундаментально міцними.",
                            CreatedAt = new DateTime(2025, 6, 11, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7233),
                            HubId = new Guid("55865bcd-48d6-45f8-a028-77caf9d2e7ac"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bad3b84f-724f-4af4-867e-3be5ae952571"),
                            AuthorId = new Guid("fb58c252-c3a6-47cb-ad91-2efd64910a14"),
                            Content = "Попри всі регуляторні виклики, Binance залишається найбільшою біржею за обсягом торгів. Їхня екосистема з BNB Chain, Launchpad та іншими сервісами все ще домінує на ринку.",
                            CreatedAt = new DateTime(2025, 6, 12, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7235),
                            HubId = new Guid("1d5320e6-358f-411b-8d67-d5534b8a7d12"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e4ab35ca-a0ce-47db-bfee-1f56d55e1540"),
                            AuthorId = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d"),
                            Content = "Багато хто питає, з чого почати інвестувати. Відповідь проста: почніть заощаджувати. Неможливо інвестувати гроші, яких у вас немає. Створіть 'фонд для інвестицій', відкладаючи хоча б 10% доходу.",
                            CreatedAt = new DateTime(2025, 6, 13, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(7237),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.PostCategory", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("PostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.PostImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98054baa-c268-4d7b-94b3-d1855bedba47"),
                            ImageUrl = "https://finhubimagesstorage.blob.core.windows.net/finhubimagesstorage/posts/post3.jpg",
                            PostId = new Guid("a8ff694e-868f-4f1a-914c-c4e633f615b5")
                        },
                        new
                        {
                            Id = new Guid("e3255522-bacc-44db-90c3-0f5a4dadfe48"),
                            ImageUrl = "https://finhubimagesstorage.blob.core.windows.net/finhubimagesstorage/posts/poat4.webp",
                            PostId = new Guid("3834e9eb-de7a-4bfc-bf42-5d9409488fa4")
                        },
                        new
                        {
                            Id = new Guid("e8ef6654-3d28-4816-a4d8-37c636af958f"),
                            ImageUrl = "https://finhubimagesstorage.blob.core.windows.net/finhubimagesstorage/posts/post2.webp",
                            PostId = new Guid("bad3b84f-724f-4af4-867e-3be5ae952571")
                        },
                        new
                        {
                            Id = new Guid("76e924fc-61a2-4e32-87a3-ac479d673648"),
                            ImageUrl = "https://finhubimagesstorage.blob.core.windows.net/finhubimagesstorage/posts/post1.webp",
                            PostId = new Guid("e4ab35ca-a0ce-47db-bfee-1f56d55e1540")
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubscribedToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscribedToId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("GoogleId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bc9f329-b54f-47f3-809a-2baa1b967a91"),
                            AccessFailedCount = 0,
                            Bio = "Цікаво дізнатися більше про фінанси.",
                            ConcurrencyStamp = "21b9c504-91ea-4e85-9a3b-9867f2a29da7",
                            Country = "Україна",
                            CreatedAt = new DateTime(2025, 4, 25, 21, 24, 14, 15, DateTimeKind.Utc).AddTicks(434),
                            Email = "oleksii@gmail.com",
                            EmailConfirmed = false,
                            LastActive = new DateTime(2025, 6, 12, 21, 24, 14, 15, DateTimeKind.Utc).AddTicks(445),
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$E1eq8/YoFpYn56TnqkKFteapNDyyUGU/Eivu.0w/8HMABGPadU05i",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "олексій"
                        },
                        new
                        {
                            Id = new Guid("f560a591-5e20-4c81-8c33-f510b57bf0dc"),
                            AccessFailedCount = 0,
                            Bio = "Люблю інвестиції і фінанси.",
                            ConcurrencyStamp = "74221be3-100d-42a6-96f1-aacb07767bb9",
                            Country = "Україна",
                            CreatedAt = new DateTime(2025, 4, 25, 21, 24, 14, 147, DateTimeKind.Utc).AddTicks(6761),
                            Email = "olena.p@gmail.com",
                            EmailConfirmed = false,
                            LastActive = new DateTime(2025, 6, 12, 21, 24, 14, 147, DateTimeKind.Utc).AddTicks(6897),
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$8dw5twzrcKT6TU5GSqkgEeGw5E4x.PVV6kp7LDPCxId48Op.Gvcfi",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "олена_інвест"
                        },
                        new
                        {
                            Id = new Guid("c0fceb80-1eed-4cb2-83d1-76518570cf7a"),
                            AccessFailedCount = 0,
                            Bio = "Твоя комфортна фінансова соціальна мережа.",
                            ConcurrencyStamp = "e46e4aa7-acd1-4758-bc37-eb36ddf5e797",
                            Country = "Україна",
                            CreatedAt = new DateTime(2025, 4, 25, 21, 24, 14, 276, DateTimeKind.Utc).AddTicks(4551),
                            Email = "finhub@gmail.com",
                            EmailConfirmed = false,
                            LastActive = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$XLZmvga4Od0B0nFWBia3SuFrF3SIHSlwxhlMxrF9kk.AJG0k8adeS",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "finhub"
                        },
                        new
                        {
                            Id = new Guid("92721bf5-f5c1-4681-97db-1e7f45557497"),
                            AccessFailedCount = 0,
                            Bio = "Досвідчений трейдер, ділюся аналітикою та ідеями.",
                            ConcurrencyStamp = "1a575f6f-1870-4d0d-ac57-2736cdc80583",
                            Country = "Польща",
                            CreatedAt = new DateTime(2025, 4, 30, 21, 24, 14, 411, DateTimeKind.Utc).AddTicks(6663),
                            Email = "maks.t@gmail.com",
                            EmailConfirmed = false,
                            LastActive = new DateTime(2025, 6, 14, 16, 24, 14, 411, DateTimeKind.Utc).AddTicks(6669),
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$6VqsO5d1x/PxPFw/M5DEIuM7XjP/1D2rkvjZJSl1rrIBhuw0CwgdG",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "трейдер_макс"
                        },
                        new
                        {
                            Id = new Guid("fb58c252-c3a6-47cb-ad91-2efd64910a14"),
                            AccessFailedCount = 0,
                            Bio = "Все про блокчейн, NFT та криптовалюти. Слідкуйте за оновленнями!",
                            ConcurrencyStamp = "9e5af364-d83d-4869-bcb1-68da64b9d57b",
                            Country = "Україна",
                            CreatedAt = new DateTime(2025, 5, 15, 21, 24, 14, 536, DateTimeKind.Utc).AddTicks(9551),
                            Email = "kate.c@gmail.com",
                            EmailConfirmed = false,
                            LastActive = new DateTime(2025, 6, 14, 20, 24, 14, 536, DateTimeKind.Utc).AddTicks(9558),
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$yUhUaUlCF1ziL9ix16.5Q.JdCAvBB6hALagtoChVEYfdqQ10NYXji",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "крипто_катя"
                        },
                        new
                        {
                            Id = new Guid("dfe0f55d-bff6-4fd6-a9bf-21b93e03654d"),
                            AccessFailedCount = 0,
                            Bio = "Фінансовий аналітик. Розбираю звітності компаній та макроекономічні тренди.",
                            ConcurrencyStamp = "85551de4-1bb4-49f2-a16b-9b8935ea03f1",
                            Country = "Німеччина",
                            CreatedAt = new DateTime(2025, 5, 25, 21, 24, 14, 662, DateTimeKind.Utc).AddTicks(4190),
                            Email = "andriy.a@emgmailil.com",
                            EmailConfirmed = false,
                            LastActive = new DateTime(2025, 6, 11, 21, 24, 14, 662, DateTimeKind.Utc).AddTicks(4195),
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$N9f7bWwIp3nDYcwLLHp3seTzjJm9oeAdUfta58.ZDM317sbzQlVXe",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "аналітик_андрій"
                        },
                        new
                        {
                            Id = new Guid("f753893e-7141-44e9-bb0b-50cc31385b0d"),
                            AccessFailedCount = 0,
                            Bio = "Веду блог про особисті фінанси, бюджетування та заощадження.",
                            ConcurrencyStamp = "8e1931fe-146e-49ee-b0f6-daf0880c0c26",
                            Country = "Україна",
                            CreatedAt = new DateTime(2025, 5, 30, 21, 24, 14, 788, DateTimeKind.Utc).AddTicks(3143),
                            Email = "yulia.f@gmail.com",
                            EmailConfirmed = false,
                            LastActive = new DateTime(2025, 6, 14, 9, 24, 14, 788, DateTimeKind.Utc).AddTicks(3150),
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$qXUk00RRA9fjzMAiH5SMp.LyJCLU5/ZiiB83Ny9.06AL1vi3zYX/C",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "фінанси_юлія"
                        },
                        new
                        {
                            Id = new Guid("6f52e78b-9776-4ba7-8e98-8a6d9082d9f2"),
                            AccessFailedCount = 0,
                            Bio = "Passionate about smart money management and personal growth. Tracking goals, budgeting wisely, and always learning something new about finance.",
                            ConcurrencyStamp = "84444e42-40a4-4dd5-8e2e-edccf7f19ab0",
                            Country = "Україна",
                            CreatedAt = new DateTime(2025, 5, 30, 21, 24, 14, 914, DateTimeKind.Utc).AddTicks(5605),
                            Email = "lisa@1",
                            EmailConfirmed = false,
                            LastActive = new DateTime(2025, 6, 14, 9, 24, 14, 914, DateTimeKind.Utc).AddTicks(5611),
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$SlF5KvpSUMGtSJr1hpjx.OrX5wltzNaVXImgVutS28SiHujb8ccHW",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ліза"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.AppUserRole", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.ChatParticipant", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.Chat", "Chat")
                        .WithMany("Participants")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Comment", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinanceHub.Core.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Connection", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.Group", null)
                        .WithMany("Collections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Following", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.User", "FollowergUser")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.Hub", "FollowingHub")
                        .WithMany()
                        .HasForeignKey("FollowingHubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FinanceHub.Core.Entities.User", "FollowingUser")
                        .WithMany()
                        .HasForeignKey("FollowingUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FollowergUser");

                    b.Navigation("FollowingHub");

                    b.Navigation("FollowingUser");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.HubJoinRequest", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.Hub", "Hub")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hub");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.HubMember", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.Hub", "Hub")
                        .WithMany("Members")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.User", "User")
                        .WithMany("HubMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hub");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Like", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Message", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.Chat", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatId");

                    b.HasOne("FinanceHub.Core.Entities.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Notification", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.HubJoinRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("FinanceHub.Core.Entities.User", "TriggeredByUser")
                        .WithMany()
                        .HasForeignKey("TriggeredBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("TriggeredByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Post", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.Hub", "Hub")
                        .WithMany("Posts")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.PostCategory", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.Category", "Category")
                        .WithMany("PostCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.Post", "Post")
                        .WithMany("PostCategory")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.PostImage", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Subscription", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.User", "SubscribedTo")
                        .WithMany()
                        .HasForeignKey("SubscribedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceHub.Core.Entities.User", "Subscriber")
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscribedTo");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Category", b =>
                {
                    b.Navigation("PostCategory");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Group", b =>
                {
                    b.Navigation("Collections");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Hub", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PostCategory");

                    b.Navigation("PostImages");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.User", b =>
                {
                    b.Navigation("HubMemberships");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
