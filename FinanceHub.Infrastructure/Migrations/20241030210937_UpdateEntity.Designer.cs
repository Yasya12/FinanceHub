// <auto-generated />
using System;
using FinanceHub.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinanceHub.Infrastructure.Migrations
{
    [DbContext(typeof(FinHubDbContext))]
    [Migration("20241030210937_UpdateEntity")]
    partial class UpdateEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinanceHub.Core.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("314fe406-61f7-4397-bc3f-15fabf92e695"),
                            AuthorId = new Guid("9717faa9-eb0a-4ed9-8598-882de21db6a1"),
                            Content = "This is an introductory post about finance.",
                            CreatedAt = new DateTime(2024, 10, 20, 21, 9, 35, 545, DateTimeKind.Utc).AddTicks(2235),
                            Title = "Introduction to Finance",
                            UpdatedAt = new DateTime(2024, 10, 25, 21, 9, 35, 545, DateTimeKind.Utc).AddTicks(2245)
                        },
                        new
                        {
                            Id = new Guid("2a5ad868-152c-4d87-9208-95e203612ccd"),
                            AuthorId = new Guid("adb1e9cb-10a6-48cd-8103-fa7c5f5b5581"),
                            Content = "Exploring advanced strategies in finance.",
                            CreatedAt = new DateTime(2024, 10, 10, 21, 9, 35, 545, DateTimeKind.Utc).AddTicks(2248),
                            Title = "Advanced Financial Strategies",
                            UpdatedAt = new DateTime(2024, 10, 28, 21, 9, 35, 545, DateTimeKind.Utc).AddTicks(2248)
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0dfd6c3-8fc1-4eb1-8454-1d59abb8d476"),
                            Country = "USA",
                            CreatedAt = new DateTime(2024, 10, 30, 21, 9, 35, 545, DateTimeKind.Utc).AddTicks(2157),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PhoneNumber = "+1234567890",
                            UpdatedAt = new DateTime(2024, 10, 30, 21, 9, 35, 545, DateTimeKind.Utc).AddTicks(2163),
                            UserId = new Guid("9717faa9-eb0a-4ed9-8598-882de21db6a1")
                        },
                        new
                        {
                            Id = new Guid("c7253b72-c415-4a06-9415-2ac4539ddff4"),
                            Country = "Canada",
                            CreatedAt = new DateTime(2024, 10, 30, 21, 9, 35, 545, DateTimeKind.Utc).AddTicks(2186),
                            DateOfBirth = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            PhoneNumber = "+9876543210",
                            UpdatedAt = new DateTime(2024, 10, 30, 21, 9, 35, 545, DateTimeKind.Utc).AddTicks(2186),
                            UserId = new Guid("adb1e9cb-10a6-48cd-8103-fa7c5f5b5581")
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("user");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9717faa9-eb0a-4ed9-8598-882de21db6a1"),
                            Email = "johndoe@example.com",
                            PasswordHash = "$2a$11$6oCvzZ/mKyThzICeRP4J2OtZRrCH80h5bYMgXIeLZWKEKUwklfblW",
                            Role = "User",
                            Username = "johndoe"
                        },
                        new
                        {
                            Id = new Guid("adb1e9cb-10a6-48cd-8103-fa7c5f5b5581"),
                            Email = "admin@example.com",
                            PasswordHash = "$2a$11$JhYjmqZnzHfvHQIfxzDZCuqqJCIknxgvSDRPpRYPqPQd/4vB.RsFC",
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Post", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.Profile", b =>
                {
                    b.HasOne("FinanceHub.Core.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("FinanceHub.Core.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceHub.Core.Entities.User", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
