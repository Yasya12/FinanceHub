using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using FinanceGub.Application.Interfaces.Servi—Åes;
using Microsoft.AspNetCore.Http;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.Formats.Jpeg;
using SixLabors.ImageSharp.Processing;

namespace FinanceHub.Infrastructure.Services;

public class AzureBlobStorageService(string connectionString, string containerName) : IAzureBlobStorageService
{
    public async Task<string> AddUserPhotoAsync(IFormFile file)
    {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä BlobServiceClient
        var blobServiceClient = new BlobServiceClient(connectionString);
        var blobContainerClient = blobServiceClient.GetBlobContainerClient(containerName);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —è–∫—â–æ –≤—ñ–Ω –Ω–µ —ñ—Å–Ω—É—î
        await blobContainerClient.CreateIfNotExistsAsync();

        // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è –¥–ª—è —Ñ–∞–π–ª—É
        var fileName = "userProfile/" + Guid.NewGuid() + Path.GetExtension(file.FileName);
        var blobClient = blobContainerClient.GetBlobClient(fileName);

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –≤ Blob Storage
        using (var stream = file.OpenReadStream())
        {
            using var image = await Image.LoadAsync(stream);

            // üñºÔ∏è –†–µ—Å–∞–π–∑ –¥–æ –º–∞–∫—Å. 300px –ø–æ —à–∏—Ä–∏–Ω—ñ –∞–±–æ –≤–∏—Å–æ—Ç—ñ, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó
            image.Mutate(x => x.Resize(new ResizeOptions
            {
                Mode = ResizeMode.Max,
                Size = new Size(300, 300)
            }));

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É MemoryStream –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
            using var outputStream = new MemoryStream();
            await image.SaveAsJpegAsync(outputStream, new JpegEncoder { Quality = 85 });
            outputStream.Position = 0;
            
            await blobClient.UploadAsync(outputStream, new BlobHttpHeaders { ContentType = file.ContentType });
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ URL –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        return blobClient.Uri.ToString();
    }
    
    public async Task<string> AddPostPhotoAsync(IFormFile file)
    {
        var blobServiceClient = new BlobServiceClient(connectionString);
        var blobContainerClient = blobServiceClient.GetBlobContainerClient(containerName);
    
        await blobContainerClient.CreateIfNotExistsAsync(); // Create container if not exists

        var fileName = "posts/" + Guid.NewGuid() + Path.GetExtension(file.FileName); // Store in "posts/" folder
        var blobClient = blobContainerClient.GetBlobClient(fileName);

        using (var stream = file.OpenReadStream())
        {
            await blobClient.UploadAsync(stream, new BlobHttpHeaders { ContentType = file.ContentType });
        }

        return blobClient.Uri.ToString(); // Return image URL 
    }
    
    public async Task<string> AddMainHubPhotoAsync(IFormFile file)
    {
        var blobServiceClient = new BlobServiceClient(connectionString);
        var blobContainerClient = blobServiceClient.GetBlobContainerClient(containerName);
    
        await blobContainerClient.CreateIfNotExistsAsync(); // Create container if not exists

        var fileName = "hubs/mainPhotos/" + Guid.NewGuid() + Path.GetExtension(file.FileName); // Store in "posts/" folder
        var blobClient = blobContainerClient.GetBlobClient(fileName);

        using (var stream = file.OpenReadStream())
        {
            await blobClient.UploadAsync(stream, new BlobHttpHeaders { ContentType = file.ContentType });
        }

        return blobClient.Uri.ToString(); // Return image URL 
    }
    
    public async Task<string> AddBackHubPhotoAsync(IFormFile file)
    {
        var blobServiceClient = new BlobServiceClient(connectionString);
        var blobContainerClient = blobServiceClient.GetBlobContainerClient(containerName);
    
        await blobContainerClient.CreateIfNotExistsAsync(); // Create container if not exists

        var fileName = "hubs/backPhotos/" + Guid.NewGuid() + Path.GetExtension(file.FileName); // Store in "posts/" folder
        var blobClient = blobContainerClient.GetBlobClient(fileName);

        using (var stream = file.OpenReadStream())
        {
            await blobClient.UploadAsync(stream, new BlobHttpHeaders { ContentType = file.ContentType });
        }

        return blobClient.Uri.ToString(); // Return image URL 
    }

    public async Task DeletePhotoAsync(string imageUrl)
    {
        var blobServiceClient = new BlobServiceClient(connectionString);
        // –û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –≤ —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        var blobContainerClient = blobServiceClient.GetBlobContainerClient(containerName);

        // –û—Ç—Ä–∏–º–∞–π—Ç–µ —ñ–º'—è –±–ª–æ–±–∞ –∑ URL
        var blobName = GetBlobNameFromUrl(imageUrl);

        // –û—Ç—Ä–∏–º–∞–π—Ç–µ –±–ª–æ–±-–∫–ª—ñ—î–Ω—Ç
        var blobClient = blobContainerClient.GetBlobClient(blobName);

        // –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–ª–æ–±–∞
        await blobClient.DeleteIfExistsAsync();
    }
    private string GetBlobNameFromUrl(string imageUrl)
    {
        var uri = new Uri(imageUrl);
        var segments = uri.Segments.Skip(2); // Skip `/` and `container/`
        var blobName = string.Join("", segments);
        return blobName;
    }

}